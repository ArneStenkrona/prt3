#ifndef PRT3_INPUT_H
#define PRT3_INPUT_H

#include "src/driver/render_backend.h"

#include <GLFW/glfw3.h>

#include <array>
#include <vector>

namespace prt3 {

enum KeyCode {
    KEY_CODE_UNKNOWN = GLFW_KEY_UNKNOWN,
    KEY_CODE_SPACE = GLFW_KEY_SPACE,
    KEY_CODE_APOSTROPHE = GLFW_KEY_APOSTROPHE,
    KEY_CODE_COMMA = GLFW_KEY_COMMA,
    KEY_CODE_MINUS = GLFW_KEY_MINUS,
    KEY_CODE_PERIOD = GLFW_KEY_PERIOD,
    KEY_CODE_SLASH = GLFW_KEY_SLASH,
    KEY_CODE_0 = GLFW_KEY_0,
    KEY_CODE_1 = GLFW_KEY_1,
    KEY_CODE_2 = GLFW_KEY_2,
    KEY_CODE_3 = GLFW_KEY_3,
    KEY_CODE_4 = GLFW_KEY_4,
    KEY_CODE_5 = GLFW_KEY_5,
    KEY_CODE_6 = GLFW_KEY_6,
    KEY_CODE_7 = GLFW_KEY_7,
    KEY_CODE_8 = GLFW_KEY_8,
    KEY_CODE_9 = GLFW_KEY_9,
    KEY_CODE_SEMICOLON = GLFW_KEY_SEMICOLON,
    KEY_CODE_EQUAL = GLFW_KEY_EQUAL,
    KEY_CODE_A = GLFW_KEY_A,
    KEY_CODE_B = GLFW_KEY_B,
    KEY_CODE_C = GLFW_KEY_C,
    KEY_CODE_D = GLFW_KEY_D,
    KEY_CODE_E = GLFW_KEY_E,
    KEY_CODE_F = GLFW_KEY_F,
    KEY_CODE_G = GLFW_KEY_G,
    KEY_CODE_H = GLFW_KEY_H,
    KEY_CODE_I = GLFW_KEY_I,
    KEY_CODE_J = GLFW_KEY_J,
    KEY_CODE_K = GLFW_KEY_K,
    KEY_CODE_L = GLFW_KEY_L,
    KEY_CODE_M = GLFW_KEY_M,
    KEY_CODE_N = GLFW_KEY_N,
    KEY_CODE_O = GLFW_KEY_O,
    KEY_CODE_P = GLFW_KEY_P,
    KEY_CODE_Q = GLFW_KEY_Q,
    KEY_CODE_R = GLFW_KEY_R,
    KEY_CODE_S = GLFW_KEY_S,
    KEY_CODE_T = GLFW_KEY_T,
    KEY_CODE_U = GLFW_KEY_U,
    KEY_CODE_V = GLFW_KEY_V,
    KEY_CODE_W = GLFW_KEY_W,
    KEY_CODE_X = GLFW_KEY_X,
    KEY_CODE_Y = GLFW_KEY_Y,
    KEY_CODE_Z = GLFW_KEY_Z,
    KEY_CODE_LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET,
    KEY_CODE_BACKSLASH = GLFW_KEY_BACKSLASH,
    KEY_CODE_RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,
    KEY_CODE_GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT,
    KEY_CODE_WORLD_1 = GLFW_KEY_WORLD_1,
    KEY_CODE_WORLD_2 = GLFW_KEY_WORLD_2,
    KEY_CODE_ESCAPE = GLFW_KEY_ESCAPE,
    KEY_CODE_ENTER = GLFW_KEY_ENTER,
    KEY_CODE_TAB = GLFW_KEY_TAB,
    KEY_CODE_BACKSPACE = GLFW_KEY_BACKSPACE,
    KEY_CODE_INSERT = GLFW_KEY_INSERT,
    KEY_CODE_DELETE = GLFW_KEY_DELETE,
    KEY_CODE_RIGHT = GLFW_KEY_RIGHT,
    KEY_CODE_LEFT = GLFW_KEY_LEFT,
    KEY_CODE_DOWN = GLFW_KEY_DOWN,
    KEY_CODE_UP = GLFW_KEY_UP,
    KEY_CODE_PAGE_UP = GLFW_KEY_PAGE_UP,
    KEY_CODE_PAGE_DOWN = GLFW_KEY_PAGE_DOWN,
    KEY_CODE_HOME = GLFW_KEY_HOME,
    KEY_CODE_END = GLFW_KEY_END,
    KEY_CODE_CAPS_LOCK = GLFW_KEY_CAPS_LOCK,
    KEY_CODE_SCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,
    KEY_CODE_NUM_LOCK = GLFW_KEY_NUM_LOCK,
    KEY_CODE_PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
    KEY_CODE_PAUSE = GLFW_KEY_PAUSE,
    KEY_CODE_F1 = GLFW_KEY_F1,
    KEY_CODE_F2 = GLFW_KEY_F2,
    KEY_CODE_F3 = GLFW_KEY_F3,
    KEY_CODE_F4 = GLFW_KEY_F4,
    KEY_CODE_F5 = GLFW_KEY_F5,
    KEY_CODE_F6 = GLFW_KEY_F6,
    KEY_CODE_F7 = GLFW_KEY_F7,
    KEY_CODE_F8 = GLFW_KEY_F8,
    KEY_CODE_F9 = GLFW_KEY_F9,
    KEY_CODE_F10 = GLFW_KEY_F10,
    KEY_CODE_F11 = GLFW_KEY_F11,
    KEY_CODE_F12 = GLFW_KEY_F12,
    KEY_CODE_F13 = GLFW_KEY_F13,
    KEY_CODE_F14 = GLFW_KEY_F14,
    KEY_CODE_F15 = GLFW_KEY_F15,
    KEY_CODE_F16 = GLFW_KEY_F16,
    KEY_CODE_F17 = GLFW_KEY_F17,
    KEY_CODE_F18 = GLFW_KEY_F18,
    KEY_CODE_F19 = GLFW_KEY_F19,
    KEY_CODE_F20 = GLFW_KEY_F20,
    KEY_CODE_F21 = GLFW_KEY_F21,
    KEY_CODE_F22 = GLFW_KEY_F22,
    KEY_CODE_F23 = GLFW_KEY_F23,
    KEY_CODE_F24 = GLFW_KEY_F24,
    KEY_CODE_F25 = GLFW_KEY_F25,
    KEY_CODE_KP_0 = GLFW_KEY_KP_0,
    KEY_CODE_KP_1 = GLFW_KEY_KP_1,
    KEY_CODE_KP_2 = GLFW_KEY_KP_2,
    KEY_CODE_KP_3 = GLFW_KEY_KP_3,
    KEY_CODE_KP_4 = GLFW_KEY_KP_4,
    KEY_CODE_KP_5 = GLFW_KEY_KP_5,
    KEY_CODE_KP_6 = GLFW_KEY_KP_6,
    KEY_CODE_KP_7 = GLFW_KEY_KP_7,
    KEY_CODE_KP_8 = GLFW_KEY_KP_8,
    KEY_CODE_KP_9 = GLFW_KEY_KP_9,
    KEY_CODE_KP_DECIMAL = GLFW_KEY_KP_DECIMAL,
    KEY_CODE_KP_DIVIDE = GLFW_KEY_KP_DIVIDE,
    KEY_CODE_KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
    KEY_CODE_KP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,
    KEY_CODE_KP_ADD = GLFW_KEY_KP_ADD,
    KEY_CODE_KP_ENTER = GLFW_KEY_KP_ENTER,
    KEY_CODE_KP_EQUAL = GLFW_KEY_KP_EQUAL,
    KEY_CODE_LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,
    KEY_CODE_LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,
    KEY_CODE_LEFT_ALT = GLFW_KEY_LEFT_ALT,
    KEY_CODE_LEFT_SUPER = GLFW_KEY_LEFT_SUPER,
    KEY_CODE_RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
    KEY_CODE_RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
    KEY_CODE_RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
    KEY_CODE_RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
    KEY_CODE_MENU = GLFW_KEY_MENU,
    // mouse buttons
    KEY_CODE_MOUSE_LEFT,
    KEY_CODE_MOUSE_RIGHT,
    KEY_CODE_MOUSE_MIDDLE,
    KEY_CODE_LAST = KEY_CODE_MOUSE_MIDDLE
};

class Input {
public:
    Input();

    bool get_key(KeyCode key_code) const;
    bool get_key_down(KeyCode key_code) const;
    bool get_key_up(KeyCode key_code) const;

    void get_cursor_position(int & x, int & y) const;
    void get_cursor_delta(int & dx, int & dy) const;
private:
    std::array<bool, KEY_CODE_LAST + 1> m_current_key_states{};
    std::array<bool, KEY_CODE_LAST + 1> m_previous_key_states{};

    double m_raw_cursor_x;
    double m_raw_cursor_y;
    int m_cursor_x;
    int m_cursor_y;
    int m_cursor_dx;
    int m_cursor_dy;

    GLFWwindow * m_window = nullptr;

    void init(GLFWwindow * window);
    void update();

    void set_mouse_capture(bool on)
    { glfwSetInputMode(m_window, GLFW_CURSOR, on ? GLFW_CURSOR_DISABLED :
                                                   GLFW_CURSOR_NORMAL); }

    friend class Renderer;
    friend class Engine;
};

} // namespace prt3

#endif
